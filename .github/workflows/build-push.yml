name: Build and Push Multi-Language Images

on:
  push:
    branches:
      - main
      - 'release/**'
    tags:
      - 'v*'
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      push_images:
        description: 'Push images to registry'
        required: false
        default: 'true'
        type: boolean

concurrency:
  group: build-push-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write
  attestations: write
  id-token: write

env:
  REGISTRY_GHCR: ghcr.io

jobs:
  # ============================================================================
  # Stage 1: Project Detection and Metadata
  # ============================================================================
  detect-and-prepare:
    name: üîç Detection & Metadata
    runs-on: ubuntu-latest
    outputs:
      has-go: ${{ steps.detect.outputs.has-go }}
      has-java: ${{ steps.detect.outputs.has-java }}
      has-python: ${{ steps.detect.outputs.has-python }}
      has-typescript: ${{ steps.detect.outputs.has-typescript }}
      version: ${{ steps.meta.outputs.version }}
      should-push: ${{ steps.meta.outputs.should-push }}
      platforms: ${{ steps.meta.outputs.platforms }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Smart project detection
        id: detect
        run: |
          echo "üîç Detecting active projects..."
          
          HAS_GO="false"
          HAS_JAVA="false" 
          HAS_PYTHON="false"
          HAS_TS="false"
          
          if [[ -f "backend-go/go.mod" && -d "backend-go/cmd" && -f "backend-go/Dockerfile" ]]; then
            HAS_GO="true"
            echo "‚úÖ Go project: backend-go/ (Docker ready)"
          fi
          
          if [[ -f "backend-java/pom.xml" && -f "backend-java/Dockerfile" ]]; then
            HAS_JAVA="true"
            echo "‚úÖ Java project: backend-java/ (Docker ready)"
          fi
          
          if [[ -f "backend-python/main.py" && -f "backend-python/requirements.txt" && -f "backend-python/Dockerfile" ]]; then
            HAS_PYTHON="true"
            echo "‚úÖ Python project: backend-python/ (Docker ready)"
          fi
          
          if [[ -f "frontend-ts/package.json" && -f "frontend-ts/tsconfig.json" && -f "frontend-ts/Dockerfile" ]]; then
            HAS_TS="true"
            echo "‚úÖ TypeScript project: frontend-ts/ (Docker ready)"
          fi
          
          # Set outputs
          echo "has-go=$HAS_GO" >> $GITHUB_OUTPUT
          echo "has-java=$HAS_JAVA" >> $GITHUB_OUTPUT
          echo "has-python=$HAS_PYTHON" >> $GITHUB_OUTPUT
          echo "has-typescript=$HAS_TS" >> $GITHUB_OUTPUT

      - name: Extract metadata
        id: meta
        run: |
          # Determine version
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            VERSION="latest"
          else
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed 's/[^a-zA-Z0-9._-]/-/g')
          fi
          
          # Determine if should push
          SHOULD_PUSH="false"
          if [[ "${{ github.event_name }}" == "push" && ("${{ github.ref }}" == "refs/heads/main" || "${{ github.ref_type }}" == "tag") ]]; then
            SHOULD_PUSH="true"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.push_images }}" == "true" ]]; then
            SHOULD_PUSH="true"
          fi
          
          # Set platforms (multi-arch only for tags, single arch for main/PR)
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            PLATFORMS="linux/amd64,linux/arm64"
          else
            PLATFORMS="linux/amd64"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "should-push=$SHOULD_PUSH" >> $GITHUB_OUTPUT
          echo "platforms=$PLATFORMS" >> $GITHUB_OUTPUT
          
          echo "üè∑Ô∏è Version: $VERSION"
          echo "üì§ Should push: $SHOULD_PUSH"
          echo "üèóÔ∏è Platforms: $PLATFORMS"

  # ============================================================================
  # Stage 2: Build Docker Images (Parallel Jobs)
  # ============================================================================
  build-go:
    name: üêπ Build Go Service
    runs-on: ubuntu-latest
    needs: detect-and-prepare
    if: needs.detect-and-prepare.outputs.has-go == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: needs.detect-and-prepare.outputs.should-push == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_GHCR }}/${{ github.repository }}-go
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.detect-and-prepare.outputs.version }}

      - name: Build and push Go image
        uses: docker/build-push-action@v5
        with:
          context: backend-go
          platforms: ${{ needs.detect-and-prepare.outputs.platforms }}
          push: ${{ needs.detect-and-prepare.outputs.should-push }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ needs.detect-and-prepare.outputs.version }}
            GIT_COMMIT=${{ github.sha }}
            BUILD_TIME=${{ github.run_id }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-java:
    name: ‚òï Build Java Service
    runs-on: ubuntu-latest
    needs: detect-and-prepare
    if: needs.detect-and-prepare.outputs.has-java == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: needs.detect-and-prepare.outputs.should-push == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_GHCR }}/${{ github.repository }}-java
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.detect-and-prepare.outputs.version }}

      - name: Build and push Java image
        uses: docker/build-push-action@v5
        with:
          context: backend-java
          platforms: ${{ needs.detect-and-prepare.outputs.platforms }}
          push: ${{ needs.detect-and-prepare.outputs.should-push }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ needs.detect-and-prepare.outputs.version }}
            GIT_COMMIT=${{ github.sha }}
            BUILD_TIME=${{ github.run_id }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-python:
    name: üêç Build Python Service
    runs-on: ubuntu-latest
    needs: detect-and-prepare
    if: needs.detect-and-prepare.outputs.has-python == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: needs.detect-and-prepare.outputs.should-push == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_GHCR }}/${{ github.repository }}-python
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.detect-and-prepare.outputs.version }}

      - name: Build and push Python image
        uses: docker/build-push-action@v5
        with:
          context: backend-python
          platforms: ${{ needs.detect-and-prepare.outputs.platforms }}
          push: ${{ needs.detect-and-prepare.outputs.should-push }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ needs.detect-and-prepare.outputs.version }}
            GIT_COMMIT=${{ github.sha }}
            BUILD_TIME=${{ github.run_id }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-typescript:
    name: üü¶ Build TypeScript Frontend
    runs-on: ubuntu-latest
    needs: detect-and-prepare
    if: needs.detect-and-prepare.outputs.has-typescript == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: needs.detect-and-prepare.outputs.should-push == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_GHCR }}/${{ github.repository }}-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.detect-and-prepare.outputs.version }}

      - name: Build and push TypeScript image
        uses: docker/build-push-action@v5
        with:
          context: frontend-ts
          platforms: ${{ needs.detect-and-prepare.outputs.platforms }}
          push: ${{ needs.detect-and-prepare.outputs.should-push }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ needs.detect-and-prepare.outputs.version }}
            GIT_COMMIT=${{ github.sha }}
            BUILD_TIME=${{ github.run_id }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ============================================================================
  # Stage 3: Summary and Notifications
  # ============================================================================
  build-summary:
    name: üìä Build Summary
    runs-on: ubuntu-latest
    needs: 
      - detect-and-prepare
      - build-go
      - build-java
      - build-python
      - build-typescript
    if: always()
    steps:
      - name: Generate build summary
        run: |
          echo "=== üê≥ Multi-Language Docker Build Summary ===" 
          echo ""
          echo "üîç Project Detection: ${{ needs.detect-and-prepare.result }}"
          echo "üìä Version: ${{ needs.detect-and-prepare.outputs.version }}"
          echo "üì§ Push to Registry: ${{ needs.detect-and-prepare.outputs.should-push }}"
          echo "üèóÔ∏è Target Platforms: ${{ needs.detect-and-prepare.outputs.platforms }}"
          echo ""
          
          echo "üê≥ Docker Build Results:"
          echo "  üêπ Go Service: ${{ needs.build-go.result }}"
          echo "  ‚òï Java Service: ${{ needs.build-java.result }}"
          echo "  üêç Python Service: ${{ needs.build-python.result }}"
          echo "  üü¶ TypeScript Frontend: ${{ needs.build-typescript.result }}"
          echo ""
          
          # Count successful builds
          SUCCESS_COUNT=0
          TOTAL_COUNT=0
          
          if [[ "${{ needs.detect-and-prepare.outputs.has-go }}" == "true" ]]; then
            TOTAL_COUNT=$((TOTAL_COUNT + 1))
            [[ "${{ needs.build-go.result }}" == "success" ]] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          fi
          
          if [[ "${{ needs.detect-and-prepare.outputs.has-java }}" == "true" ]]; then
            TOTAL_COUNT=$((TOTAL_COUNT + 1))
            [[ "${{ needs.build-java.result }}" == "success" ]] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          fi
          
          if [[ "${{ needs.detect-and-prepare.outputs.has-python }}" == "true" ]]; then
            TOTAL_COUNT=$((TOTAL_COUNT + 1))
            [[ "${{ needs.build-python.result }}" == "success" ]] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          fi
          
          if [[ "${{ needs.detect-and-prepare.outputs.has-typescript }}" == "true" ]]; then
            TOTAL_COUNT=$((TOTAL_COUNT + 1))
            [[ "${{ needs.build-typescript.result }}" == "success" ]] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          fi
          
          echo "üìä Build Success Rate: $SUCCESS_COUNT/$TOTAL_COUNT images built successfully"
          
          if [[ "${{ needs.detect-and-prepare.outputs.should-push }}" == "true" ]]; then
            echo ""
            echo "üéØ Published Images:"
            if [[ "${{ needs.detect-and-prepare.outputs.has-go }}" == "true" && "${{ needs.build-go.result }}" == "success" ]]; then
              echo "  üêπ ${{ env.REGISTRY_GHCR }}/${{ github.repository }}-go:${{ needs.detect-and-prepare.outputs.version }}"
            fi
            if [[ "${{ needs.detect-and-prepare.outputs.has-java }}" == "true" && "${{ needs.build-java.result }}" == "success" ]]; then
              echo "  ‚òï ${{ env.REGISTRY_GHCR }}/${{ github.repository }}-java:${{ needs.detect-and-prepare.outputs.version }}"
            fi
            if [[ "${{ needs.detect-and-prepare.outputs.has-python }}" == "true" && "${{ needs.build-python.result }}" == "success" ]]; then
              echo "  üêç ${{ env.REGISTRY_GHCR }}/${{ github.repository }}-python:${{ needs.detect-and-prepare.outputs.version }}"
            fi
            if [[ "${{ needs.detect-and-prepare.outputs.has-typescript }}" == "true" && "${{ needs.build-typescript.result }}" == "success" ]]; then
              echo "  üü¶ ${{ env.REGISTRY_GHCR }}/${{ github.repository }}-frontend:${{ needs.detect-and-prepare.outputs.version }}"
            fi
          fi
          
          if [[ "$SUCCESS_COUNT" == "$TOTAL_COUNT" && "$TOTAL_COUNT" -gt 0 ]]; then
            echo ""
            echo "‚úÖ üéâ All Docker images built successfully!"
            if [[ "${{ needs.detect-and-prepare.outputs.should-push }}" == "true" ]]; then
              echo "üöÄ Images are now available in GitHub Container Registry"
            else
              echo "üì¶ Images built locally (not pushed to registry)"
            fi
          else
            echo ""
            echo "‚ùå üö® Some Docker builds failed - check individual job results"
            exit 1
          fi

          # Additional info for manual workflow dispatch
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo ""
            echo "üîß Manual Workflow Dispatch Summary:"
            echo "  Trigger: ${{ github.actor }}"
            echo "  Ref: ${{ github.ref }}"
            echo "  Push Images: ${{ github.event.inputs.push_images }}"
          fi