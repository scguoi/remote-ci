name: Code Quality & Testing Pipeline

on:
  push:
    branches:
      - main
      - 'feature/**'
      - 'bugfix/**'
      - 'hotfix/**'
  pull_request:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  # Python version for Makefile commands
  PYTHON: python3

jobs:
  # ============================================================================
  # Stage 1: Project Detection
  # ============================================================================
  detect:
    name: Smart Project Detection
    runs-on: ubuntu-latest
    timeout-minutes: 3
    outputs:
      has-go: ${{ steps.detect.outputs.has-go }}
      has-java: ${{ steps.detect.outputs.has-java }}
      has-python: ${{ steps.detect.outputs.has-python }}
      has-typescript: ${{ steps.detect.outputs.has-typescript }}
      active-projects: ${{ steps.detect.outputs.active-projects }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Smart project detection
        id: detect
        run: |
          echo "Detecting active projects..."
          
          HAS_GO="false"
          HAS_JAVA="false" 
          HAS_PYTHON="false"
          HAS_TS="false"
          
          if [[ -f "backend-go/go.mod" && -d "backend-go/cmd" ]]; then
            HAS_GO="true"
            echo "‚úÖ Go project: backend-go/"
          fi
          
          if [[ -f "backend-java/pom.xml" && -d "backend-java/user-web" ]]; then
            HAS_JAVA="true"
            echo "‚úÖ Java project: backend-java/"
          fi
          
          if [[ -f "backend-python/main.py" && -f "backend-python/requirements.txt" ]]; then
            HAS_PYTHON="true"
            echo "‚úÖ Python project: backend-python/"
          fi
          
          if [[ -f "frontend-ts/package.json" && -f "frontend-ts/tsconfig.json" ]]; then
            HAS_TS="true"
            echo "‚úÖ TypeScript project: frontend-ts/"
          fi
          
          # Set outputs
          echo "has-go=$HAS_GO" >> $GITHUB_OUTPUT
          echo "has-java=$HAS_JAVA" >> $GITHUB_OUTPUT
          echo "has-python=$HAS_PYTHON" >> $GITHUB_OUTPUT
          echo "has-typescript=$HAS_TS" >> $GITHUB_OUTPUT
          
          # Generate active projects list
          ACTIVE=""
          [[ "$HAS_GO" == "true" ]] && ACTIVE="$ACTIVE go"
          [[ "$HAS_JAVA" == "true" ]] && ACTIVE="$ACTIVE java"
          [[ "$HAS_PYTHON" == "true" ]] && ACTIVE="$ACTIVE python"
          [[ "$HAS_TS" == "true" ]] && ACTIVE="$ACTIVE typescript"
          
          ACTIVE=$(echo $ACTIVE | xargs)
          echo "active-projects=$ACTIVE" >> $GITHUB_OUTPUT
          echo "üéØ Active projects: $ACTIVE"

  # ============================================================================
  # Stage 2: Code Format Check (Fast Feedback)
  # ============================================================================
  format-check:
    name: Code Format Check
    runs-on: ubuntu-latest
    needs: detect
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup environments efficiently for format checking only
      - name: Setup Go (if needed)
        if: needs.detect.outputs.has-go == 'true'
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache-dependency-path: backend-go/go.sum

      - name: Setup Java (if needed)
        if: needs.detect.outputs.has-java == 'true'
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven

      - name: Setup Python (if needed)
        if: needs.detect.outputs.has-python == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Setup Node.js (if needed)
        if: needs.detect.outputs.has-typescript == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: frontend-ts/package-lock.json

      # Install minimal dependencies for formatting
      - name: Install Python formatting tools
        if: needs.detect.outputs.has-python == 'true'
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install black==23.11.0 isort==5.12.0

      - name: Install TypeScript formatting tools
        if: needs.detect.outputs.has-typescript == 'true'
        working-directory: frontend-ts
        run: |
          npm ci --only=dev --ignore-scripts
          npm install prettier @typescript-eslint/parser @typescript-eslint/eslint-plugin eslint

      # Run format checking
      - name: Check code formatting
        run: |
          echo "üéØ Checking code formatting for: ${{ needs.detect.outputs.active-projects }}"
          
          # Use smart format with dry-run/check mode
          if ! make format --dry-run 2>/dev/null; then
            echo "‚ö†Ô∏è make format --dry-run not supported, trying make smart_format --check"
            if ! make smart_format --check 2>/dev/null; then
              echo "‚ùå Code formatting check failed"
              echo "üí° Run 'make format' locally to fix formatting issues"
              exit 1
            fi
          fi
          
          echo "‚úÖ Code formatting check passed!"

  # ============================================================================
  # Stage 3: Code Quality Check (Parallel with lightweight setup)
  # ============================================================================
  quality-check:
    name: Code Quality Check
    runs-on: ubuntu-latest
    needs: [detect, format-check]
    timeout-minutes: 8
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Lightweight environment setup for quality checks
      - name: Setup Go tools
        if: needs.detect.outputs.has-go == 'true'
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache-dependency-path: backend-go/go.sum

      - name: Setup Java environment
        if: needs.detect.outputs.has-java == 'true'
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven

      - name: Setup Python environment
        if: needs.detect.outputs.has-python == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Setup Node.js environment
        if: needs.detect.outputs.has-typescript == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: frontend-ts/package-lock.json

      # Install quality check dependencies
      - name: Install Go quality tools
        if: needs.detect.outputs.has-go == 'true'
        working-directory: backend-go
        run: |
          go install honnef.co/go/tools/cmd/staticcheck@2025.1.1
          go install github.com/golangci/golangci-lint/v2/cmd/golangci-lint@v2.3.0
          go install github.com/fzipp/gocyclo/cmd/gocyclo@latest

      - name: Install Python quality tools
        if: needs.detect.outputs.has-python == 'true'
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install flake8==6.1.0 mypy==1.7.1 pylint==3.0.3

      - name: Install TypeScript quality tools
        if: needs.detect.outputs.has-typescript == 'true'
        working-directory: frontend-ts
        run: |
          npm ci --only=dev
          npm install typescript@^5.0.0 @typescript-eslint/parser @typescript-eslint/eslint-plugin eslint

      # Run quality checks per language
      - name: Run Go quality checks
        if: needs.detect.outputs.has-go == 'true'
        working-directory: backend-go
        run: |
          echo "üîç Go quality checks..."
          gocyclo -over 10 $(find . -name "*.go" | grep -v vendor)
          staticcheck ./...
          golangci-lint run
          echo "‚úÖ Go quality checks passed"

      - name: Run Java quality checks  
        if: needs.detect.outputs.has-java == 'true'
        working-directory: backend-java
        run: |
          echo "üîç Java quality checks..."
          mvn clean compile -q
          mvn spotless:check -q
          mvn checkstyle:check -q
          echo "‚úÖ Java quality checks passed"

      - name: Run Python quality checks
        if: needs.detect.outputs.has-python == 'true'
        working-directory: backend-python
        run: |
          echo "üîç Python quality checks..."
          python3 -m flake8 .
          python3 -m mypy . --ignore-missing-imports
          echo "‚úÖ Python quality checks passed"

      - name: Run TypeScript quality checks
        if: needs.detect.outputs.has-typescript == 'true'
        working-directory: frontend-ts
        run: |
          echo "üîç TypeScript quality checks..."
          npx tsc --project tsconfig.ci.json --noEmit
          npx eslint "src/**/*.{ts,tsx}" --max-warnings 20
          echo "‚úÖ TypeScript quality checks passed"

  # ============================================================================
  # Stage 4: Unit Tests (Parallel)
  # ============================================================================
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [detect, format-check]
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup test environments
      - name: Setup Go
        if: needs.detect.outputs.has-go == 'true'
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache-dependency-path: backend-go/go.sum

      - name: Setup Java
        if: needs.detect.outputs.has-java == 'true'
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven

      - name: Setup Python
        if: needs.detect.outputs.has-python == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: pip
          cache-dependency-path: backend-python/requirements.txt

      - name: Setup Node.js
        if: needs.detect.outputs.has-typescript == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: frontend-ts/package-lock.json

      # Install test dependencies
      - name: Install Python dependencies
        if: needs.detect.outputs.has-python == 'true'
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install -r backend-python/requirements.txt
          python3 -m pip install pytest==7.4.3 pytest-asyncio==0.21.1 pytest-cov==4.1.0

      - name: Install TypeScript test dependencies
        if: needs.detect.outputs.has-typescript == 'true'
        working-directory: frontend-ts
        run: npm ci

      # Run tests per language
      - name: Run Go tests
        if: needs.detect.outputs.has-go == 'true'
        working-directory: backend-go
        run: |
          echo "üß™ Running Go tests..."
          go test ./... -v
          echo "‚úÖ Go tests passed"

      - name: Run Java tests
        if: needs.detect.outputs.has-java == 'true'
        working-directory: backend-java
        run: |
          echo "üß™ Running Java tests..."
          mvn test -q
          echo "‚úÖ Java tests passed"

      - name: Run Python tests
        if: needs.detect.outputs.has-python == 'true'
        working-directory: backend-python
        run: |
          echo "üß™ Running Python tests..."
          python3 -m pytest tests/ -v
          echo "‚úÖ Python tests passed"

      - name: Run TypeScript tests
        if: needs.detect.outputs.has-typescript == 'true'
        working-directory: frontend-ts
        run: |
          echo "üß™ Running TypeScript tests..."
          npm test -- --ci --passWithNoTests
          echo "‚úÖ TypeScript tests passed"

  # ============================================================================
  # Summary
  # ============================================================================
  summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [detect, format-check, quality-check, unit-tests]
    if: always()
    steps:
      - name: Generate pipeline summary
        run: |
          echo "=== üöÄ Code Quality & Testing Pipeline Summary ==="
          echo ""
          echo "üìä Detected projects: ${{ needs.detect.outputs.active-projects }}"
          echo ""
          echo "üìã Pipeline stages:"
          echo "  üéØ Project Detection: ${{ needs.detect.result }}"
          echo "  ‚ú® Format Check: ${{ needs.format-check.result }}"  
          echo "  üîç Quality Check: ${{ needs.quality-check.result }}"
          echo "  üß™ Unit Tests: ${{ needs.unit-tests.result }}"
          echo ""
          
          if [[ "${{ needs.format-check.result }}" == "success" && 
                "${{ needs.quality-check.result }}" == "success" && 
                "${{ needs.unit-tests.result }}" == "success" ]]; then
            echo "‚úÖ üéâ Pipeline completed successfully! Code quality verified"
            echo "üí° Ready for code review and merge"
          else
            echo "‚ùå üö® Pipeline failed - please check the issues above"
            echo "üí° Fix the failing stages and commit again"
            exit 1
          fi