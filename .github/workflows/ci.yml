name: Parallel Multi-Language CI

on:
  push:
    branches:
      - main
      - 'feature/**'
      - 'bugfix/**'
      - 'hotfix/**'
  pull_request:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON: python3

jobs:
  # ============================================================================
  # Stage 1: Setup All Environments (Once for All Languages)
  # ============================================================================
  setup:
    name: Setup All Environments
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      has-go: ${{ steps.detect.outputs.has-go }}
      has-java: ${{ steps.detect.outputs.has-java }}
      has-python: ${{ steps.detect.outputs.has-python }}
      has-typescript: ${{ steps.detect.outputs.has-typescript }}
      active-projects: ${{ steps.detect.outputs.active-projects }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Smart project detection
        id: detect
        run: |
          echo "Detecting active projects..."
          
          HAS_GO="false"
          HAS_JAVA="false" 
          HAS_PYTHON="false"
          HAS_TS="false"
          
          if [[ -f "backend-go/go.mod" && -d "backend-go/cmd" ]]; then
            HAS_GO="true"
            echo "‚úÖ Go project: backend-go/"
          fi
          
          if [[ -f "backend-java/pom.xml" && -d "backend-java/user-web" ]]; then
            HAS_JAVA="true"
            echo "‚úÖ Java project: backend-java/"
          fi
          
          if [[ -f "backend-python/main.py" && -f "backend-python/requirements.txt" ]]; then
            HAS_PYTHON="true"
            echo "‚úÖ Python project: backend-python/"
          fi
          
          if [[ -f "frontend-ts/package.json" && -f "frontend-ts/tsconfig.json" ]]; then
            HAS_TS="true"
            echo "‚úÖ TypeScript project: frontend-ts/"
          fi
          
          # Set outputs
          echo "has-go=$HAS_GO" >> $GITHUB_OUTPUT
          echo "has-java=$HAS_JAVA" >> $GITHUB_OUTPUT
          echo "has-python=$HAS_PYTHON" >> $GITHUB_OUTPUT
          echo "has-typescript=$HAS_TS" >> $GITHUB_OUTPUT
          
          # Generate active projects list
          ACTIVE=""
          [[ "$HAS_GO" == "true" ]] && ACTIVE="$ACTIVE go"
          [[ "$HAS_JAVA" == "true" ]] && ACTIVE="$ACTIVE java"
          [[ "$HAS_PYTHON" == "true" ]] && ACTIVE="$ACTIVE python"
          [[ "$HAS_TS" == "true" ]] && ACTIVE="$ACTIVE typescript"
          
          ACTIVE=$(echo $ACTIVE | xargs)
          echo "active-projects=$ACTIVE" >> $GITHUB_OUTPUT
          echo "üéØ Active projects: $ACTIVE"

      # Setup all language environments in parallel sub-steps
      - name: Setup Go environment
        if: steps.detect.outputs.has-go == 'true'
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache-dependency-path: backend-go/go.sum

      - name: Setup Java environment  
        if: steps.detect.outputs.has-java == 'true'
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven

      - name: Setup Python environment
        if: steps.detect.outputs.has-python == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: pip
          cache-dependency-path: backend-python/requirements.txt

      - name: Setup Node.js environment
        if: steps.detect.outputs.has-typescript == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: frontend-ts/package-lock.json

      # Install all tools and dependencies
      - name: Install Go tools and dependencies
        if: steps.detect.outputs.has-go == 'true'
        working-directory: backend-go
        run: |
          echo "Installing Go tools..."
          go install golang.org/x/tools/cmd/goimports@latest
          go install mvdan.cc/gofumpt@latest  
          go install github.com/segmentio/golines@latest
          go install honnef.co/go/tools/cmd/staticcheck@2025.1.1
          go install github.com/golangci/golangci-lint/v2/cmd/golangci-lint@v2.3.0
          go install github.com/fzipp/gocyclo/cmd/gocyclo@latest
          echo "‚úÖ Go tools installed"

      - name: Install Java dependencies
        if: steps.detect.outputs.has-java == 'true'
        working-directory: backend-java
        run: |
          echo "Installing Java dependencies..."
          mvn dependency:go-offline -B -q
          echo "‚úÖ Java dependencies installed"

      - name: Install Python tools and dependencies
        if: steps.detect.outputs.has-python == 'true'
        run: |
          echo "Installing Python tools and dependencies..."
          python3 -m pip install --upgrade pip
          python3 -m pip install -r backend-python/requirements.txt
          python3 -m pip install black==23.11.0 isort==5.12.0 flake8==6.1.0 mypy==1.7.1 pylint==3.0.3 pytest==7.4.3 pytest-asyncio==0.21.1 pytest-cov==4.1.0
          echo "‚úÖ Python tools and dependencies installed"

      - name: Install TypeScript tools and dependencies
        if: steps.detect.outputs.has-typescript == 'true'
        working-directory: frontend-ts
        run: |
          echo "Installing TypeScript tools and dependencies..."
          npm ci
          echo "‚úÖ TypeScript tools and dependencies installed"

  # ============================================================================
  # Stage 2: Go Complete Pipeline (Parallel)
  # ============================================================================
  go-pipeline:
    name: Go Pipeline
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.has-go == 'true'
    timeout-minutes: 8
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache-dependency-path: backend-go/go.sum

      - name: Install Go tools
        working-directory: backend-go
        run: |
          go install golang.org/x/tools/cmd/goimports@latest
          go install mvdan.cc/gofumpt@latest  
          go install github.com/segmentio/golines@latest
          go install honnef.co/go/tools/cmd/staticcheck@2025.1.1
          go install github.com/golangci/golangci-lint/v2/cmd/golangci-lint@v2.3.0
          go install github.com/fzipp/gocyclo/cmd/gocyclo@latest

      - name: Go format check
        working-directory: backend-go
        run: |
          echo "üé® Checking Go formatting..."
          if ! gofmt -l . | grep -q .; then
            echo "‚úÖ Go formatting check passed"
          else
            echo "‚ùå Go formatting issues found:"
            gofmt -l .
            exit 1
          fi

      - name: Go quality check
        working-directory: backend-go
        run: |
          echo "üîç Running Go quality checks..."
          gocyclo -over 10 $(find . -name "*.go" | grep -v vendor)
          staticcheck ./...
          golangci-lint run
          echo "‚úÖ Go quality check passed"

      - name: Go tests
        working-directory: backend-go
        run: |
          echo "üß™ Running Go tests..."
          go test ./... -v
          echo "‚úÖ Go tests passed"

  # ============================================================================
  # Stage 3: Java Complete Pipeline (Parallel)
  # ============================================================================
  java-pipeline:
    name: Java Pipeline
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.has-java == 'true'
    timeout-minutes: 8
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java environment
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven

      - name: Install dependencies
        working-directory: backend-java
        run: mvn dependency:go-offline -B -q

      - name: Java format check
        working-directory: backend-java
        run: |
          echo "üé® Checking Java formatting..."
          mvn spotless:check -q
          echo "‚úÖ Java formatting check passed"

      - name: Java quality check
        working-directory: backend-java
        run: |
          echo "üîç Running Java quality checks..."
          mvn clean compile -q
          mvn checkstyle:check -q
          echo "‚úÖ Java quality check passed"

      - name: Java tests
        working-directory: backend-java
        run: |
          echo "üß™ Running Java tests..."
          mvn test -q
          echo "‚úÖ Java tests passed"

  # ============================================================================
  # Stage 4: Python Complete Pipeline (Parallel)
  # ============================================================================
  python-pipeline:
    name: Python Pipeline
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.has-python == 'true'
    timeout-minutes: 8
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python environment
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: pip
          cache-dependency-path: backend-python/requirements.txt

      - name: Install Python tools and dependencies
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install -r backend-python/requirements.txt
          python3 -m pip install black==23.11.0 isort==5.12.0 flake8==6.1.0 mypy==1.7.1 pylint==3.0.3 pytest==7.4.3 pytest-asyncio==0.21.1 pytest-cov==4.1.0

      - name: Python format check
        working-directory: backend-python
        run: |
          echo "üé® Checking Python formatting..."
          python3 -m black --check .
          python3 -m isort --check-only .
          echo "‚úÖ Python formatting check passed"

      - name: Python quality check
        working-directory: backend-python
        run: |
          echo "üîç Running Python quality checks..."
          python3 -m flake8 . --max-line-length=88 --extend-ignore=E203,W503
          python3 -m mypy . --ignore-missing-imports
          echo "‚úÖ Python quality check passed"

      - name: Python tests
        working-directory: backend-python
        run: |
          echo "üß™ Running Python tests..."
          python3 -m pytest tests/ -v
          echo "‚úÖ Python tests passed"

  # ============================================================================
  # Stage 5: TypeScript Complete Pipeline (Parallel)
  # ============================================================================
  typescript-pipeline:
    name: TypeScript Pipeline
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.has-typescript == 'true'
    timeout-minutes: 8
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: frontend-ts/package-lock.json

      - name: Install TypeScript dependencies
        working-directory: frontend-ts
        run: npm ci

      - name: TypeScript format check
        working-directory: frontend-ts
        run: |
          echo "üé® Checking TypeScript formatting..."
          npx prettier --check "**/*.{ts,tsx,js,jsx,json,md}"
          echo "‚úÖ TypeScript formatting check passed"

      - name: TypeScript quality check
        working-directory: frontend-ts
        run: |
          echo "üîç Running TypeScript quality checks..."
          npx tsc --project tsconfig.ci.json --noEmit
          npx eslint "src/**/*.{ts,tsx}" --max-warnings 20
          echo "‚úÖ TypeScript quality check passed"

      - name: TypeScript tests
        working-directory: frontend-ts
        run: |
          echo "üß™ Running TypeScript tests..."
          npm test -- --ci --passWithNoTests
          echo "‚úÖ TypeScript tests passed"

  # ============================================================================
  # Summary
  # ============================================================================
  summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [setup, go-pipeline, java-pipeline, python-pipeline, typescript-pipeline]
    if: always()
    steps:
      - name: Generate pipeline summary
        run: |
          echo "=== üöÄ Parallel Multi-Language CI Summary ==="
          echo ""
          echo "üìä Detected projects: ${{ needs.setup.outputs.active-projects }}"
          echo ""
          echo "üìã Pipeline results:"
          echo "  üéØ Environment Setup: ${{ needs.setup.result }}"
          echo "  üêπ Go Pipeline: ${{ needs.go-pipeline.result }}"
          echo "  ‚òï Java Pipeline: ${{ needs.java-pipeline.result }}"  
          echo "  üêç Python Pipeline: ${{ needs.python-pipeline.result }}"
          echo "  üü¶ TypeScript Pipeline: ${{ needs.typescript-pipeline.result }}"
          echo ""
          
          # Count successes
          SUCCESS_COUNT=0
          TOTAL_COUNT=0
          
          if [[ "${{ needs.setup.outputs.has-go }}" == "true" ]]; then
            TOTAL_COUNT=$((TOTAL_COUNT + 1))
            [[ "${{ needs.go-pipeline.result }}" == "success" ]] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          fi
          
          if [[ "${{ needs.setup.outputs.has-java }}" == "true" ]]; then
            TOTAL_COUNT=$((TOTAL_COUNT + 1))
            [[ "${{ needs.java-pipeline.result }}" == "success" ]] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          fi
          
          if [[ "${{ needs.setup.outputs.has-python }}" == "true" ]]; then
            TOTAL_COUNT=$((TOTAL_COUNT + 1))
            [[ "${{ needs.python-pipeline.result }}" == "success" ]] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          fi
          
          if [[ "${{ needs.setup.outputs.has-typescript }}" == "true" ]]; then
            TOTAL_COUNT=$((TOTAL_COUNT + 1))
            [[ "${{ needs.typescript-pipeline.result }}" == "success" ]] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          fi
          
          echo "üìä Success rate: $SUCCESS_COUNT/$TOTAL_COUNT pipelines passed"
          
          if [[ "$SUCCESS_COUNT" == "$TOTAL_COUNT" && "${{ needs.setup.result }}" == "success" ]]; then
            echo "‚úÖ üéâ All pipelines completed successfully!"
            echo "üí° Code quality verified - ready for review and merge"
          else
            echo "‚ùå üö® Some pipelines failed - check individual results above"
            echo "üí° Fix the failing pipelines and commit again"
            exit 1
          fi