name: Fully Parallel Multi-Language CI

on:
  push:
    branches:
      - main
      - 'feature/**'
      - 'bugfix/**'
      - 'hotfix/**'
  pull_request:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON: python3

jobs:
  # ============================================================================
  # Stage 1: Detect Projects (Single Detection Job)
  # ============================================================================
  detect-projects:
    name: üîç Smart Project Detection
    runs-on: ubuntu-latest
    timeout-minutes: 2
    outputs:
      has-go: ${{ steps.detect.outputs.has-go }}
      has-java: ${{ steps.detect.outputs.has-java }}
      has-python: ${{ steps.detect.outputs.has-python }}
      has-typescript: ${{ steps.detect.outputs.has-typescript }}
      active-projects: ${{ steps.detect.outputs.active-projects }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Smart project detection
        id: detect
        run: |
          echo "üîç Detecting active projects..."
          
          HAS_GO="false"
          HAS_JAVA="false" 
          HAS_PYTHON="false"
          HAS_TS="false"
          
          if [[ -f "backend-go/go.mod" && -d "backend-go/cmd" ]]; then
            HAS_GO="true"
            echo "‚úÖ Go project: backend-go/"
          fi
          
          if [[ -f "backend-java/pom.xml" && -d "backend-java/user-web" ]]; then
            HAS_JAVA="true"
            echo "‚úÖ Java project: backend-java/"
          fi
          
          if [[ -f "backend-python/main.py" && -f "backend-python/requirements.txt" ]]; then
            HAS_PYTHON="true"
            echo "‚úÖ Python project: backend-python/"
          fi
          
          if [[ -f "frontend-ts/package.json" && -f "frontend-ts/tsconfig.json" ]]; then
            HAS_TS="true"
            echo "‚úÖ TypeScript project: frontend-ts/"
          fi
          
          # Set outputs
          echo "has-go=$HAS_GO" >> $GITHUB_OUTPUT
          echo "has-java=$HAS_JAVA" >> $GITHUB_OUTPUT
          echo "has-python=$HAS_PYTHON" >> $GITHUB_OUTPUT
          echo "has-typescript=$HAS_TS" >> $GITHUB_OUTPUT
          
          # Generate active projects list
          ACTIVE=""
          [[ "$HAS_GO" == "true" ]] && ACTIVE="$ACTIVE go"
          [[ "$HAS_JAVA" == "true" ]] && ACTIVE="$ACTIVE java"
          [[ "$HAS_PYTHON" == "true" ]] && ACTIVE="$ACTIVE python"
          [[ "$HAS_TS" == "true" ]] && ACTIVE="$ACTIVE typescript"
          
          ACTIVE=$(echo $ACTIVE | xargs)
          echo "active-projects=$ACTIVE" >> $GITHUB_OUTPUT
          echo "üéØ Active projects: $ACTIVE"

  # ============================================================================
  # Stage 2: Setup Environments (4 Parallel Jobs)
  # ============================================================================
  setup-go:
    name: üêπ Setup Go Environment
    runs-on: ubuntu-latest
    needs: detect-projects
    if: needs.detect-projects.outputs.has-go == 'true'
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache-dependency-path: backend-go/go.sum

      - name: Install Go tools and dependencies
        working-directory: backend-go
        run: |
          echo "üõ†Ô∏è Installing Go tools..."
          go install golang.org/x/tools/cmd/goimports@latest
          go install mvdan.cc/gofumpt@latest  
          go install github.com/segmentio/golines@latest
          go install honnef.co/go/tools/cmd/staticcheck@2025.1.1
          go install github.com/golangci/golangci-lint/v2/cmd/golangci-lint@v2.3.0
          go install github.com/fzipp/gocyclo/cmd/gocyclo@latest
          echo "‚úÖ Go tools installed successfully"

  setup-java:
    name: ‚òï Setup Java Environment
    runs-on: ubuntu-latest
    needs: detect-projects
    if: needs.detect-projects.outputs.has-java == 'true'
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java environment
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven

      - name: Install Java dependencies
        working-directory: backend-java
        run: |
          echo "üì¶ Installing Java dependencies..."
          mvn dependency:go-offline -B -q
          echo "‚úÖ Java dependencies installed successfully"

  setup-python:
    name: üêç Setup Python Environment
    runs-on: ubuntu-latest
    needs: detect-projects
    if: needs.detect-projects.outputs.has-python == 'true'
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python environment
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: pip
          cache-dependency-path: backend-python/requirements.txt

      - name: Install Python tools and dependencies
        run: |
          echo "üõ†Ô∏è Installing Python tools and dependencies..."
          python3 -m pip install --upgrade pip
          python3 -m pip install -r backend-python/requirements.txt
          python3 -m pip install black==23.11.0 isort==5.12.0 flake8==6.1.0 mypy==1.7.1 pylint==3.0.3 pytest==7.4.3 pytest-asyncio==0.21.1 pytest-cov==4.1.0
          echo "‚úÖ Python tools and dependencies installed successfully"

  setup-typescript:
    name: üü¶ Setup TypeScript Environment
    runs-on: ubuntu-latest
    needs: detect-projects
    if: needs.detect-projects.outputs.has-typescript == 'true'
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: frontend-ts/package-lock.json

      - name: Install TypeScript tools and dependencies
        working-directory: frontend-ts
        run: |
          echo "üõ†Ô∏è Installing TypeScript tools and dependencies..."
          npm ci
          echo "‚úÖ TypeScript tools and dependencies installed successfully"

  # ============================================================================
  # Stage 3: Format Checks (4 Parallel Jobs)
  # ============================================================================
  format-go:
    name: üé® Go Format Check
    runs-on: ubuntu-latest
    needs: [detect-projects, setup-go]
    if: needs.detect-projects.outputs.has-go == 'true'
    timeout-minutes: 3
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache-dependency-path: backend-go/go.sum

      - name: Install Go tools
        working-directory: backend-go
        run: |
          go install golang.org/x/tools/cmd/goimports@latest
          go install mvdan.cc/gofumpt@latest  
          go install github.com/segmentio/golines@latest

      - name: Go format check
        working-directory: backend-go
        run: |
          echo "üé® Checking Go formatting..."
          if ! gofmt -l . | grep -q .; then
            echo "‚úÖ Go formatting check passed"
          else
            echo "‚ùå Go formatting issues found:"
            gofmt -l .
            exit 1
          fi

  format-java:
    name: üé® Java Format Check
    runs-on: ubuntu-latest
    needs: [detect-projects, setup-java]
    if: needs.detect-projects.outputs.has-java == 'true'
    timeout-minutes: 3
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java environment
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven

      - name: Java format check
        working-directory: backend-java
        run: |
          echo "üé® Checking Java formatting..."
          mvn spotless:check -q
          echo "‚úÖ Java formatting check passed"

  format-python:
    name: üé® Python Format Check
    runs-on: ubuntu-latest
    needs: [detect-projects, setup-python]
    if: needs.detect-projects.outputs.has-python == 'true'
    timeout-minutes: 3
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python environment
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: pip
          cache-dependency-path: backend-python/requirements.txt

      - name: Install Python tools
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install black==23.11.0 isort==5.12.0

      - name: Python format check
        working-directory: backend-python
        run: |
          echo "üé® Checking Python formatting..."
          python3 -m black --check .
          python3 -m isort --check-only .
          echo "‚úÖ Python formatting check passed"

  format-typescript:
    name: üé® TypeScript Format Check
    runs-on: ubuntu-latest
    needs: [detect-projects, setup-typescript]
    if: needs.detect-projects.outputs.has-typescript == 'true'
    timeout-minutes: 3
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: frontend-ts/package-lock.json

      - name: Install TypeScript dependencies
        working-directory: frontend-ts
        run: npm ci

      - name: TypeScript format check
        working-directory: frontend-ts
        run: |
          echo "üé® Checking TypeScript formatting..."
          npx prettier --check "**/*.{ts,tsx,js,jsx,json,md}"
          echo "‚úÖ TypeScript formatting check passed"

  # ============================================================================
  # Stage 4: Quality Checks (4 Parallel Jobs)
  # ============================================================================
  quality-go:
    name: üîç Go Quality Check
    runs-on: ubuntu-latest
    needs: [detect-projects, setup-go]
    if: needs.detect-projects.outputs.has-go == 'true'
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache-dependency-path: backend-go/go.sum

      - name: Install Go tools
        working-directory: backend-go
        run: |
          go install honnef.co/go/tools/cmd/staticcheck@2025.1.1
          go install github.com/golangci/golangci-lint/v2/cmd/golangci-lint@v2.3.0
          go install github.com/fzipp/gocyclo/cmd/gocyclo@latest

      - name: Go quality check
        working-directory: backend-go
        run: |
          echo "üîç Running Go quality checks..."
          gocyclo -over 10 $(find . -name "*.go" | grep -v vendor)
          staticcheck ./...
          golangci-lint run
          echo "‚úÖ Go quality check passed"

  quality-java:
    name: üîç Java Quality Check
    runs-on: ubuntu-latest
    needs: [detect-projects, setup-java]
    if: needs.detect-projects.outputs.has-java == 'true'
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java environment
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven

      - name: Java quality check
        working-directory: backend-java
        run: |
          echo "üîç Running Java quality checks..."
          mvn clean compile -q
          mvn checkstyle:check -q
          echo "‚úÖ Java quality check passed"

  quality-python:
    name: üîç Python Quality Check
    runs-on: ubuntu-latest
    needs: [detect-projects, setup-python]
    if: needs.detect-projects.outputs.has-python == 'true'
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python environment
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: pip
          cache-dependency-path: backend-python/requirements.txt

      - name: Install Python tools
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install flake8==6.1.0 mypy==1.7.1

      - name: Python quality check
        working-directory: backend-python
        run: |
          echo "üîç Running Python quality checks..."
          python3 -m flake8 . --max-line-length=88 --extend-ignore=E203,W503
          python3 -m mypy . --ignore-missing-imports
          echo "‚úÖ Python quality check passed"

  quality-typescript:
    name: üîç TypeScript Quality Check
    runs-on: ubuntu-latest
    needs: [detect-projects, setup-typescript]
    if: needs.detect-projects.outputs.has-typescript == 'true'
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: frontend-ts/package-lock.json

      - name: Install TypeScript dependencies
        working-directory: frontend-ts
        run: npm ci

      - name: TypeScript quality check
        working-directory: frontend-ts
        run: |
          echo "üîç Running TypeScript quality checks..."
          npm run type-check:ci
          npm run lint
          echo "‚úÖ TypeScript quality check passed"

  # ============================================================================
  # Stage 5: Tests (4 Parallel Jobs)
  # ============================================================================
  test-go:
    name: üß™ Go Tests
    runs-on: ubuntu-latest
    needs: [detect-projects, setup-go]
    if: needs.detect-projects.outputs.has-go == 'true'
    timeout-minutes: 8
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache-dependency-path: backend-go/go.sum

      - name: Go tests
        working-directory: backend-go
        run: |
          echo "üß™ Running Go tests..."
          go test ./... -v
          echo "‚úÖ Go tests passed"

  test-java:
    name: üß™ Java Tests
    runs-on: ubuntu-latest
    needs: [detect-projects, setup-java]
    if: needs.detect-projects.outputs.has-java == 'true'
    timeout-minutes: 8
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java environment
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven

      - name: Install dependencies
        working-directory: backend-java
        run: mvn dependency:go-offline -B -q

      - name: Java tests
        working-directory: backend-java
        run: |
          echo "üß™ Running Java tests..."
          mvn test -q
          echo "‚úÖ Java tests passed"

  test-python:
    name: üß™ Python Tests
    runs-on: ubuntu-latest
    needs: [detect-projects, setup-python]
    if: needs.detect-projects.outputs.has-python == 'true'
    timeout-minutes: 8
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python environment
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: pip
          cache-dependency-path: backend-python/requirements.txt

      - name: Install Python tools and dependencies
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install -r backend-python/requirements.txt
          python3 -m pip install pytest==7.4.3 pytest-asyncio==0.21.1 pytest-cov==4.1.0

      - name: Python tests
        working-directory: backend-python
        run: |
          echo "üß™ Running Python tests..."
          python3 -m pytest tests/ -v
          echo "‚úÖ Python tests passed"

  test-typescript:
    name: üß™ TypeScript Tests
    runs-on: ubuntu-latest
    needs: [detect-projects, setup-typescript]
    if: needs.detect-projects.outputs.has-typescript == 'true'
    timeout-minutes: 8
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: frontend-ts/package-lock.json

      - name: Install TypeScript dependencies
        working-directory: frontend-ts
        run: npm ci

      - name: TypeScript tests
        working-directory: frontend-ts
        run: |
          echo "üß™ Running TypeScript tests..."
          npm test -- --ci --passWithNoTests
          echo "‚úÖ TypeScript tests passed"

  # ============================================================================
  # Stage 6: Summary
  # ============================================================================
  summary:
    name: üìä Pipeline Summary
    runs-on: ubuntu-latest
    needs: 
      - detect-projects
      - setup-go
      - setup-java
      - setup-python
      - setup-typescript
      - format-go
      - format-java
      - format-python
      - format-typescript
      - quality-go
      - quality-java
      - quality-python
      - quality-typescript
      - test-go
      - test-java
      - test-python
      - test-typescript
    if: always()
    timeout-minutes: 2
    steps:
      - name: Generate comprehensive pipeline summary
        run: |
          echo "=== üöÄ Fully Parallel Multi-Language CI Summary ===" 
          echo ""
          echo "üîç Project Detection: ${{ needs.detect-projects.result }}"
          echo "üìä Detected projects: ${{ needs.detect-projects.outputs.active-projects }}"
          echo ""
          
          echo "üìã Setup Results:"
          echo "  üêπ Go Setup: ${{ needs.setup-go.result }}"
          echo "  ‚òï Java Setup: ${{ needs.setup-java.result }}"
          echo "  üêç Python Setup: ${{ needs.setup-python.result }}"
          echo "  üü¶ TypeScript Setup: ${{ needs.setup-typescript.result }}"
          echo ""
          
          echo "üé® Format Check Results:"
          echo "  üêπ Go Format: ${{ needs.format-go.result }}"
          echo "  ‚òï Java Format: ${{ needs.format-java.result }}"
          echo "  üêç Python Format: ${{ needs.format-python.result }}"
          echo "  üü¶ TypeScript Format: ${{ needs.format-typescript.result }}"
          echo ""
          
          echo "üîç Quality Check Results:"
          echo "  üêπ Go Quality: ${{ needs.quality-go.result }}"
          echo "  ‚òï Java Quality: ${{ needs.quality-java.result }}"
          echo "  üêç Python Quality: ${{ needs.quality-python.result }}"
          echo "  üü¶ TypeScript Quality: ${{ needs.quality-typescript.result }}"
          echo ""
          
          echo "üß™ Test Results:"
          echo "  üêπ Go Tests: ${{ needs.test-go.result }}"
          echo "  ‚òï Java Tests: ${{ needs.test-java.result }}"
          echo "  üêç Python Tests: ${{ needs.test-python.result }}"
          echo "  üü¶ TypeScript Tests: ${{ needs.test-typescript.result }}"
          echo ""
          
          # Count successes for each stage
          SETUP_SUCCESS=0
          FORMAT_SUCCESS=0
          QUALITY_SUCCESS=0
          TEST_SUCCESS=0
          TOTAL_PROJECTS=0
          
          # Check each language if detected
          if [[ "${{ needs.detect-projects.outputs.has-go }}" == "true" ]]; then
            TOTAL_PROJECTS=$((TOTAL_PROJECTS + 1))
            [[ "${{ needs.setup-go.result }}" == "success" ]] && SETUP_SUCCESS=$((SETUP_SUCCESS + 1))
            [[ "${{ needs.format-go.result }}" == "success" ]] && FORMAT_SUCCESS=$((FORMAT_SUCCESS + 1))
            [[ "${{ needs.quality-go.result }}" == "success" ]] && QUALITY_SUCCESS=$((QUALITY_SUCCESS + 1))
            [[ "${{ needs.test-go.result }}" == "success" ]] && TEST_SUCCESS=$((TEST_SUCCESS + 1))
          fi
          
          if [[ "${{ needs.detect-projects.outputs.has-java }}" == "true" ]]; then
            TOTAL_PROJECTS=$((TOTAL_PROJECTS + 1))
            [[ "${{ needs.setup-java.result }}" == "success" ]] && SETUP_SUCCESS=$((SETUP_SUCCESS + 1))
            [[ "${{ needs.format-java.result }}" == "success" ]] && FORMAT_SUCCESS=$((FORMAT_SUCCESS + 1))
            [[ "${{ needs.quality-java.result }}" == "success" ]] && QUALITY_SUCCESS=$((QUALITY_SUCCESS + 1))
            [[ "${{ needs.test-java.result }}" == "success" ]] && TEST_SUCCESS=$((TEST_SUCCESS + 1))
          fi
          
          if [[ "${{ needs.detect-projects.outputs.has-python }}" == "true" ]]; then
            TOTAL_PROJECTS=$((TOTAL_PROJECTS + 1))
            [[ "${{ needs.setup-python.result }}" == "success" ]] && SETUP_SUCCESS=$((SETUP_SUCCESS + 1))
            [[ "${{ needs.format-python.result }}" == "success" ]] && FORMAT_SUCCESS=$((FORMAT_SUCCESS + 1))
            [[ "${{ needs.quality-python.result }}" == "success" ]] && QUALITY_SUCCESS=$((QUALITY_SUCCESS + 1))
            [[ "${{ needs.test-python.result }}" == "success" ]] && TEST_SUCCESS=$((TEST_SUCCESS + 1))
          fi
          
          if [[ "${{ needs.detect-projects.outputs.has-typescript }}" == "true" ]]; then
            TOTAL_PROJECTS=$((TOTAL_PROJECTS + 1))
            [[ "${{ needs.setup-typescript.result }}" == "success" ]] && SETUP_SUCCESS=$((SETUP_SUCCESS + 1))
            [[ "${{ needs.format-typescript.result }}" == "success" ]] && FORMAT_SUCCESS=$((FORMAT_SUCCESS + 1))
            [[ "${{ needs.quality-typescript.result }}" == "success" ]] && QUALITY_SUCCESS=$((QUALITY_SUCCESS + 1))
            [[ "${{ needs.test-typescript.result }}" == "success" ]] && TEST_SUCCESS=$((TEST_SUCCESS + 1))
          fi
          
          echo "üìä Stage Success Rates:"
          echo "  üõ†Ô∏è Setup: $SETUP_SUCCESS/$TOTAL_PROJECTS"
          echo "  üé® Format: $FORMAT_SUCCESS/$TOTAL_PROJECTS"
          echo "  üîç Quality: $QUALITY_SUCCESS/$TOTAL_PROJECTS" 
          echo "  üß™ Tests: $TEST_SUCCESS/$TOTAL_PROJECTS"
          echo ""
          
          TOTAL_CHECKS=$((SETUP_SUCCESS + FORMAT_SUCCESS + QUALITY_SUCCESS + TEST_SUCCESS))
          EXPECTED_CHECKS=$((TOTAL_PROJECTS * 4))
          
          echo "üéØ Overall Success: $TOTAL_CHECKS/$EXPECTED_CHECKS checks passed"
          
          if [[ "${{ needs.detect-projects.result }}" == "success" && "$TOTAL_CHECKS" == "$EXPECTED_CHECKS" ]]; then
            echo "‚úÖ üéâ All pipelines completed successfully!"
            echo "üí° Fully parallel execution completed - ready for review and merge"
          else
            echo "‚ùå üö® Some pipeline stages failed - check individual results above"
            echo "üí° Fix the failing stages and commit again"
            exit 1
          fi