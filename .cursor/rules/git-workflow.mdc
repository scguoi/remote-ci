# Git 工作流程规范

## 分支命名规范

项目使用以下分支命名规范：
- `master` - 主分支
- `develop` - 开发分支
- `feature-*` - 功能分支
- `hotfix-*` - 热修复分支

## 分支管理命令

### 创建分支
```bash
make new-feature name=user-auth    # 创建功能分支
make new-hotfix name=critical-fix  # 创建热修复分支
```

### 分支检查
```bash
make check-branch    # 检查当前分支命名规范
make safe-push       # 安全推送分支
```

## Git钩子

项目配置了以下Git钩子：

### pre-commit钩子
- 自动格式化代码
- 运行代码质量检查
- 确保提交前代码质量

### commit-msg钩子
- 验证提交信息格式
- 遵循Conventional Commits规范

### pre-push钩子
- 验证分支命名规范
- 确保推送的分支符合规范

## 提交信息格式

遵循Conventional Commits规范：
```
<type>(<scope>): <description>

# 示例
feat: add user authentication
fix(auth): resolve login validation issue
docs: update README with new features
```

## 工作流程

1. **创建功能分支**：`make new-feature name=feature-name`
2. **开发代码**：编写和测试代码
3. **格式化代码**：`make fmt`
4. **质量检查**：`make check`
5. **提交代码**：Git钩子会自动运行检查
6. **推送分支**：`make safe-push`

## 最佳实践

- 始终使用规范的分支命名
- 提交前运行质量检查
- 使用有意义的提交信息
- 定期同步主分支
- 及时清理已合并的分支
description:
globs:
alwaysApply: false
---
